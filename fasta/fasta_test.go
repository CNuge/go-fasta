package fasta

import (
	"fmt"
	"reflect"
	"testing"
)

/*
The unit tests are broken down into test functions which correspond to the
package file Names.
*/

func TestIO(t *testing.T) {

	test_1 := Fasta{Seq{Name: "SAC1",
		Sequence: "TGCATGTTGGAAACATGGCCCTGGCATATGTCTATCTTTCTCTCGGTCTCTAGGGCTAAGCTTCTCTTCCTTATATTTTT"},
		Seq{Name: "SAC2",
			Sequence: "TGCATTACTTAGAGTGGTAGGTCAGTAGGGACGGTGCCTAACGTGTGAATCTCAAATGACACACAATTCCTTAAACATAGTACACGTC"},
		Seq{Name: "SAC3",
			Sequence: "TGCATAAGGCTACCATCTAGGCGAACGTTATATTGGAATGGAATATGCAAGATCGGAAGAGCGGTTCAGCAGGACCGAGACC"},
		Seq{Name: "SAC4",
			Sequence: "TGCATTAGGGGTGTGTGTGTGTGTGTGTGTGTGTGTTTGGTATGCAAGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCATC"},
		Seq{Name: "SAC5",
			Sequence: "TGCATGCTTTTCAGATTTTATTTTGTGTGGATCCCCATTGAGGCCTTTCCTCGCGTTCATCAGAAATGTATAGAGATGGCTTCCA"},
		Seq{Name: "SAC6",
			Sequence: "TGCATTGATGCTAAATAGGGCCTCAGCTTGACAATTCATTCAAGTAACAAATGTTTGGATTCCTGATTTTGATTTTTTTTTCTTAACATTT"},
		Seq{Name: "SAC7",
			Sequence: "TGCATTCCTACTTGGACACGTTACAGTAGATGTAACAACCCACTTTGTAAGCCTCATACTACCGACATGCGTAATTAGAAAAAGAGAGAGTTAAG"},
		Seq{Name: "SAC8",
			Sequence: "TGCATGATTTTTCACCAGTACTTGAAAATGTGAATAAAACCGTAAATACGTTACGCTCCATACATGCAAGATCGGAAGAGCGGTT"},
		Seq{Name: "SAC9",
			Sequence: "TGCATGTGTGTATACATATCTGTACTGTCTCGCTTGACAGGCTTACAGTGGCACTGGGAATGATACTTATGCCTGTAATGTGTTT"},
		Seq{Name: "SAC10",
			Sequence: "TGCATTTAATCTTATCCGATAGGCGAAATCTAAATAGATAACTTTGGAAAAACTGGGCCCAGAGGCTTACTGAGGATTAAACTAC"},
	}

	ex_file := "../example_data/example1.fasta"

	test_in := Read(ex_file)

	if reflect.DeepEqual(test_1, test_in) != true {
		t.Errorf("Test of fasta reader produced incorrect data. Received: %v\n", test_in)
	}
}

func TestQuery(t *testing.T) {

	AF298042 := Fasta{Seq{Name: "AF298042.1 Salvelinus alpinus alpinus haplotype ARCTIC_16 mitochondrial D-loop, partial sequence",
		Sequence: "CCACTAATATGTACAATAATGAATATTGTATCTCAACAAATTAGTGTCATAATACATCTATGTATAATATTGCATATTATGTATTTACCCATATATACAATACCTGTATGATGAGTAGTACATCATATGTATTATCAACATAAGTGAATTTAAGCCCTCATATATCAGCATAAACCCAAGATTTACATAAGCTAAACACGTGATAATAACCAACTAGGTTGTTTTAACCTAGATAATTGCTACATTAACAAAACTCCAACTAACACGGGCTCCGTCTTTACCCACCAACTTTCAGCATCAGTCCTACTTAATGTAGTAAGAACCGACCAACGATTTATCAGTAGGCATACTCTTATTGATGGTGAGGGGCAAATATCGTATTAGGTAACATCTCGTGAACTATTCCTGGCATTTGGTTCCTAAGTCGAGGGCTATCCTTAAGAAACCAGCCCCTGAAAGCCGAATGTTAAGCATCTGGTTAATGGTGTCAATCTTATTGTTCGTTACCCACAAAGCCGGGCGTTCTCTTATATGCATAGGGTTCTCCTTT"},
	}

	single_id := []string{"AF298042.1"}
	out1 := Query(single_id)

	if reflect.DeepEqual(out1, AF298042) != true {
		t.Errorf("Single Query of Accession Number from NCBI did not match expected output. Received:\n %v\n Expected:%v", out1, AF298042)
	}

	AF298042_AY646679 := Fasta{Seq{Name: "AF298042.1 Salvelinus alpinus alpinus haplotype ARCTIC_16 mitochondrial D-loop, partial sequence",
		Sequence: "CCACTAATATGTACAATAATGAATATTGTATCTCAACAAATTAGTGTCATAATACATCTATGTATAATATTGCATATTATGTATTTACCCATATATACAATACCTGTATGATGAGTAGTACATCATATGTATTATCAACATAAGTGAATTTAAGCCCTCATATATCAGCATAAACCCAAGATTTACATAAGCTAAACACGTGATAATAACCAACTAGGTTGTTTTAACCTAGATAATTGCTACATTAACAAAACTCCAACTAACACGGGCTCCGTCTTTACCCACCAACTTTCAGCATCAGTCCTACTTAATGTAGTAAGAACCGACCAACGATTTATCAGTAGGCATACTCTTATTGATGGTGAGGGGCAAATATCGTATTAGGTAACATCTCGTGAACTATTCCTGGCATTTGGTTCCTAAGTCGAGGGCTATCCTTAAGAAACCAGCCCCTGAAAGCCGAATGTTAAGCATCTGGTTAATGGTGTCAATCTTATTGTTCGTTACCCACAAAGCCGGGCGTTCTCTTATATGCATAGGGTTCTCCTTT"},
		Seq{Name: "AY646679.1 Spironucleus barkhanus from wild Arctic charr small subunit ribosomal RNA gene, partial sequence",
			Sequence: "AAGATTAAAGCCCTGCATGCCTATGTGTAGACAGTTATATTCATTATTGTGGAGCAAAAACGGCGAACAGCTCATTTATCAGTGGTAAGTGCATACAATGTATTTCGTTGGATAGTAACGGAAAATCTGTTAGTAATACATGAACTGTTTTTAGCATTATGTTAAAAATAATAGTAAGTGCGATTGTATATCTGCCACTGCAGCATCATCTTACGTTGGTGGGATATTTGCCTACCAAGGATTCGACGCTTACGGGGAATTAGGGTTTGACTCCGGAGAATGAGCATGAGAAACAGCTCATACATCTAAGGAAGGCAGCAGGCGCGGAAATTGCCCAATGTATCTTTTATACGAGGCAGTGACAAGAAATGGTAGGCACTTTTGTGCACTATCGAGGGTTAGTGGTATCTTTGCTAACCGTGACTCGTGGGCAAGCTCGGTGCCAGCAGCCGCGGTAATTCCGACACAGGGAGTTTTCCATTTGGTTGCTGCAGTTAAAAAGTTCGTAGTTTACTGACTCTTTCACTATAAGCAAAGCCGAATGCTCCAAGTTTTTTAGCAGTATTTATAGTATGAAATTATAGCGCGGCATTGAACGTAGTTTGGGGTACTCGATAGGGACAGGTGAAATAGGATGATCTATCGAAGACCCACGGTAGCGGAGGCTCCCAACGAAGTCCAAGTGTCACGATCAAGAACTAAAGTCAGGGGATAGACGACGATTAGACACCGTTTTATTCCTGACCCTAAACGATGTCGCCTAGCTGATGGGATTTTTTTCATTTGCCAAGAGAAATCGTAAGGTTTCAGACTCTGGGGGAAGTATGATCGCAAGGTTGAAACTTGAAGGGATTGACGGAGAGGTACCACCAGACGTGGAGTCTGCGGCTCAATTTGACTCAACACGCAAACATTACTAGGCCCAGAAGCTTTGAGGATTGACAGATGAGTGATCTTTCATGATTAAGTTGTTGGTGGTGCATGGCCGTTCTTAGTCCGTGATTTAAATTGTCTGCTTTATTGCGATAACGAACGAGACCTCTATCAGATTTATTATCTGAGACTGCTAGTGATGAACTAGAGGAAGGCAGAGGCAAAAACAGGTCTGTGATGCCCTTAGAAGCCCTAGGCCGCACGCGTACTACAATGGCAGGTTCATCGTGTTGCTTCCCTGAAAATGGTGGCAGTTCATTAAAACTTGTCGTGGTTAGGACTGAAGGTTGAAATTATCCTTCACGAATGAGGAATGTCTAGTAAGTGTAGGTTATGAATCTACGCTGATTACGTCCCTACCCCTTGTACACACCGCCCGTCGCTCCTACTGATTGGGAAGATCTGGTGAGTTATTCGGACCCATAGGTAAGCAATTATCTGTGGTAACAATTGCGAGCCAACTCTTCTAGAGGAAGG"},
	}

	list_of_ids := []string{"AF298042.1", "AY646679.1"}
	out2 := Query(list_of_ids)

	if reflect.DeepEqual(out2, AF298042_AY646679) != true {
		t.Errorf("Multiple Query of Accession Number from NCBI did not match expected output. Received:\n %v\nExpected:\n%v", out2, AF298042_AY646679)
	}
}

func TestSort(t *testing.T) {

	unsorted := Fasta{Seq{Name: "sdsdsd", Sequence: "CAT"},
		Seq{Name: "chr1", Sequence: "GC"},
		Seq{Name: "1chr", Sequence: "ATGC"},
		Seq{Name: "chr2", Sequence: "AATT"}}

	sorted := Fasta{Seq{Name: "1chr", Sequence: "ATGC"},
		Seq{Name: "chr1", Sequence: "GC"},
		Seq{Name: "chr2", Sequence: "AATT"},
		Seq{Name: "sdsdsd", Sequence: "CAT"}}

	unsorted.Sort()
	if reflect.DeepEqual(unsorted, sorted) != true {
		t.Errorf("Sorting of Fasta structure incorrect: %v\n want: %v.", unsorted, sorted)
	}
}

func TestSummary(t *testing.T) {

	test_in := Fasta{Seq{Name: "test_seq1",
		Sequence: "ATGCATGCATGC"},
		Seq{Name: "test_seq2",
			Sequence: "ATATATATATATATATATATAAAAAGC"},
		Seq{Name: "test_seq3",
			Sequence: "GCGCGCGCATGCGCGCGC"},
		Seq{Name: "test_seq4",
			Sequence: "IYMHIARGLYYGSY"},
	}

	exp_output := []summaryDat{summaryDat{name: "test_seq1",
		length: 12,
		gc:     50.00},
		summaryDat{name: "test_seq2",
			length: 27,
			gc:     7.41,
			seqtype: "DNA"},
		summaryDat{name: "test_seq3",
			length: 18,
			gc:     88.89,
			seqtype: "DNA"},
		summaryDat{name: "test_seq4",
			length: 14,
			gc:     0.00,
			seqtype: "AminoAcid"}}

	test_output := test_in.Summary()

	test_output_string := ""
	for _, i := range test_in.Summary() {
		test_output_string = fmt.Sprintf("%v%v", test_output_string, i.String())
	}

	exp_output_string := ""
	for _, i := range test_in.Summary() {
		exp_output_string = fmt.Sprintf("%v%v", exp_output_string, i.String())
	}

	if reflect.DeepEqual(test_output_string, exp_output_string) != true {
		fmt.Printf("Summary of Fasta incorrect: %v\n want: %v.", test_output, exp_output)
	}
}
